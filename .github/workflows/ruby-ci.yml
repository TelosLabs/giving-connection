name: RubyCI
on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  # Add secret key to Repository secrets
  RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
  DATABASE_URL: postgres://postgres:postgres@localhost:5432/test
  REDIS_URL: redis://localhost:6379/0

jobs:
  tests:
    name: Tests
    env:
      RAILS_ENV: test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ""
      POSTGRES_DB: postgres

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:10.8
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        # tmpfs makes DB faster by using RAM
        options: >-
          --mount type=tmpfs,destination=/var/lib/postgresql/data
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis
        ports:
          - 6379:6379
        options: --entrypoint redis-server

    steps:
      - uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          # runs 'bundle install' and caches installed gems automatically
          bundler-cache: true

      - name: Create DB
        run: |
          bin/rails db:prepare

      - name: Run tests
        run: |
          bundle exec rspec

  linters:
    name: Linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - run: |
          git fetch --no-tags --prune --depth=10 origin +refs/heads/*:refs/remotes/origin/*

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          # runs 'bundle install' and caches installed gems automatically
          bundler-cache: true

      # - name: Run pronto and comment with RuboCop issues
      #   run: |
      #     export PRONTO_PULL_REQUEST_ID=`echo $CI_PULL_REQUEST | grep -o 'pull.*' | cut -f2- -d/`
      #     PRONTO_PULL_REQUEST_ID=$PRONTO_PULL_REQUEST_ID PRONTO_GITHUB_ACCESS_TOKEN=$PRONTO_GITHUB_ACCESS_TOKEN bundle exec pronto run -c origin/main -f github_status -f github_pr_review || exit 0

      - name: Run linters
        run: |
          PRONTO_PULL_REQUEST_ID=$GITHUB_PULL_REQUEST_ID PRONTO_GITHUB_ACCESS_TOKEN=$GITHUB_ACCESS_TOKEN bundle exec pronto run -c origin/main -f github_status -f github_pr_review || exit 0
        env:
          PRONTO_PULL_REQUEST_ID: ${{ github.event.pull_request.number }}
          PRONTO_GITHUB_ACCESS_TOKEN: "${{ github.token }}"

  security:
    name: Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Ruby and install gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Run security checks
        run: |
          bundle exec brakeman -w3 -o tmp/brakeman.html

  # database:
  #   env:
  #     RAILS_ENV: test
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: ""
  #     POSTGRES_DB: postgres
  #
  #   services:
  #     postgres:
  #       image: postgres:10.8
  #       ports:
  #         - 5432:5432
  #       # needed because the postgres container does not provide a healthcheck
  #       # tmpfs makes DB faster by using RAM
  #       options: >-
  #         --mount type=tmpfs,destination=/var/lib/postgresql/data
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #
  #   name: Database consistency check
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #
  #     - name: Setup Ruby and install gems
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         bundler-cache: true
  #
  #     - name: Setup database checks
  #       run: |
  #         bundle exec database_consistency install
  #     - name: Run database checks
  #       run: |
  #         bundle exec database_consistency

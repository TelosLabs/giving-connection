/ FullCalendar JS
script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.17/index.global.min.js"
script src='https://unpkg.com/popper.js/dist/umd/popper.min.js'
script src="https://unpkg.com/tooltip.js/dist/umd/tooltip.min.js"

div data-controller="calendar-component" data-calendar-component-target="calendar" class="calendar-container"
    div class="flex align-center justify-center"
        div id="calendar" class="w-full h-full mt-2"

div class="flex stretch justify-center items-center gap-24 mt-4 bg-gray-100 p-4 rounded-lg"
    div class="flex items-center gap-2"
        div class="w-4 h-4 rounded-full bg-[blue]" id="legend_outreach"
        span Outreach
    div class="flex items-center gap-2"
        div class="w-4 h-4 rounded-full bg-[blue]" id="legend_volunteer"
        span Volunteer
    div class="flex items-center gap-2"
        div class="w-4 h-4 rounded-full bg-[blue]" id="legend_fundraiser"
        span Fundraiser
    div class="flex items-center gap-2" 
        div class="w-4 h-4 rounded-full bg-[blue]" id="legend_other"
        span Other
    - if @admin
      div class="flex items-center gap-2"
          div class="w-4 h-4 rounded-full bg-[red]"
          span Draft

style
  | /* Override FullCalendar styles */
  | .fc-header-toolbar {
  |   margin-bottom: 10px !important;
  | }
  | .fc-day-today {
  |   background-color: #f8f9fa !important;
  | }
  | .fc .fc-event-title {
  |   white-space: normal !important;
  |   font: 'Inter';
  | }
  | .fc .fc-event {
  |   padding: 2px 4px !important;
  | }
  | .fc .fc-daygrid-day-events .fc-event {
  |   background-color: rgba(0, 0, 0, 0.02) !important; 
  |   
  | }
  | .fc-daygrid-day-number {
  |    color: #1F2D3D !important;
  | }
  | .fc-daygrid-day-top {
  |    flex-direction: row !important;  
  | }
  | .fc .fc-col-header-cell {
  |   background-color: #E2ECF7 !important;
  |   padding-top: .75em !important;
  |   padding-bottom: .75em !important;
  |   text-align: center !important;;
  | }
  |
  | .fc .fc-col-header-cell:first-child {
  |   border-radius: 5px 0 0 0 !important;
  | }
  |
  | .fc .fc-col-header-cell:last-child {
  |   border-radius: 0 5px 0 0 !important;
  | }
  |
  | .fc-theme-standard .fc-scrollgrid {
  |   border-radius: 5px 5px 0 0 !important;
  | }
  | 
  | .fc .fc-col-header-cell-cushion {
  |   color: #707070 !important;
  |   font-size: 16px;
  |   font-weight: 500;
  |   line-height: 150%; /* 24px */
  |   letter-spacing: -0.176px;
  |   text-transform: uppercase;
  | }
  | .fc .fc-button-primary {
  |   background: none !important;
  |   border: none !important;
  |   color: #1F2D3D !important;
  | }


javascript:
  document.addEventListener('DOMContentLoaded', setupCalendar);

  async function setupCalendar() {
    // Background Colors (HSL)
    const badge_bg_colors = { 
      "Fundraiser": "hsl(204, 100%, 94%)", 
      "Volunteer": "hsl(226, 100%, 94%)", 
      "Outreach": "hsl(137, 100%, 93%)", 
      "Other": "hsl(0, 0%, 93%)" 
    };

    // Text Colors (HSL)
    const badge_text_colors = { 
      "Fundraiser": "hsl(216, 76%, 27%)", 
      "Volunteer": "hsl(245, 58%, 51%)", 
      "Outreach": "hsl(162, 83%, 18%)", 
      "Other": "hsl(214, 33%, 18%)" 
    };

    const cal_colors = {
      "Fundraiser": "hsl(204, 100%, 45%)",
      "Volunteer": "hsl(226, 100%, 45%)",
      "Outreach": "hsl(137, 100%, 45%)",
      "Other": "hsl(0, 0%, 45%)"
    };

    // Update legend colors
    document.getElementById('legend_other').style.backgroundColor = cal_colors["Other"];
    document.getElementById('legend_volunteer').style.backgroundColor = cal_colors["Volunteer"];
    document.getElementById('legend_fundraiser').style.backgroundColor = cal_colors["Fundraiser"];
    document.getElementById('legend_outreach').style.backgroundColor = cal_colors["Outreach"];

    var calendarEl = document.getElementById('calendar');
    const isAdminCalendar = "#{@admin}" == "true";
    var events = [];
    
    if (isAdminCalendar) {
      let orgIds = document.getElementById('org_ids').value.split(' ');
      for (let orgId of orgIds) {
        const response = await fetch("/events?org_id=" + orgId, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').getAttribute('content')
          }
        });
        if (!response.ok) {
          console.error('Error fetching events:', response.statusText);
          return;
        }
        const data = await response.json();
        data.events.forEach(event => {
          events.push({
            id: event.id,
            title: event.title,
            start: event.start_time,
            end: event.end_time,
            description: event.description,
            location: event.location,
            url: `/events/explore/${event.id}`,
            eventType: event.type_of_event,
            orgName: data.organization.name,
            color: event.published ? cal_colors[event.type_of_event[0]] || 'grey' : 'red',
            editable: false,
          });
        });
      }
    } else {
      // Parse url parameters for filters if they exist
      const urlParams = new URLSearchParams(window.location.search);
      const response = await fetch(urlParams.size > 0 ? `/events?${urlParams.toString()}` : "/events", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        }
      });
      if (!response.ok) {
        console.error('Error fetching events:', response.statusText);
        return;
      }
      const data = await response.json();
      data.events.forEach(event => {
        events.push({
          id: event.id,
          title: event.title,
          start: event.start_time,
          end: event.end_time,
          description: event.description,
          location: event.location,
          url: `/events/explore/${event.id}`,
          eventType: event.type_of_event,
          orgName: data.organizations.find(org => org.id == event.organization_id).name,
          color: cal_colors[event.type_of_event[0]] || 'grey',
          editable: false,
        });
      });
    }

    window.calendar = new FullCalendar.Calendar(calendarEl, {
      initialView: 'dayGridMonth',
      headerToolbar: {
        left: 'prev,next today',
        center: 'title',
        right: 'dayGridMonth,timeGridWeek,timeGridDay'
      },
      events,
      eventDidMount: function(info) {
        // Set href of the event element to the event URL
        info.el.setAttribute('href', info.event.url);

        // Initialize the tooltip with custom options
        const eventStart = info.event.start;
        const eventEnd = info.event.end || eventStart;
        const eventTitle = info.event.title;
        const location = info.event.extendedProps.location || 'Remote';
        const description = info.event.extendedProps.description || '';
        const orgName = info.event.extendedProps.orgName || '?';
        const eventTypes = info.event.extendedProps.eventType || [];

        const singleDay = eventStart.getDate() === eventEnd.getDate();
        const truncateLength = 250;
        
        const tooltipContent = `
          <div class="p-4 z-10 bg-white rounded-[5px] shadow-[5px_5px_10px_5px_rgba(0,0,0,0.05)] outline outline-1 outline-offset-[-1px] outline-neutral-300 inline-flex justify-start items-start gap-2.5 overflow-hidden">
            <div class="w-56 inline-flex flex-col justify-start items-start gap-4">
              <div class="self-stretch h-3.5 justify-center text-color-azure-18 text-xs font-semibold font-['Inter'] leading-tight">
                ${
                  singleDay 
                  ?
                    eventStart.toLocaleDateString() + ' ' + eventStart.toLocaleTimeString([], { timeStyle: 'short' })
                  :
                    eventStart.toLocaleDateString() + ' ' + eventStart.toLocaleTimeString([], { timeStyle: 'short' }) + ' - ' +
                    eventEnd.toLocaleDateString() + ' ' + eventEnd.toLocaleTimeString([], { timeStyle: 'short' })
                }
              </div>
              <div class="self-stretch flex flex-col justify-start items-start gap-1">
                <div class="self-stretch h-4 justify-center text-black text-base font-['Inter'] font-bold leading-none">
                  ${eventTitle}
                </div>
                <div class="text-sm self-stretch h-4 justify-center text-black font-['Inter'] font-medium leading-none">
                  ${orgName}
                </div>
                <div class="self-stretch h-2.5 inline-flex justify-start items-center gap-0.5">
                  <div class="w-48 h-3 justify-center text-color-grey-46 text-xs text-[#6B7280] font-['Inter'] leading-none">
                    ${location}
                  </div>
                </div>
              </div>
              <div class="justify-center text-black text-xs font-normal font-['Inter'] leading-none">
                ${description.length > truncateLength ? description.substring(0, truncateLength) + '...' : description}
              </div>
              <div>
                ${eventTypes.map(type => `
                  <span style="background-color: ${badge_bg_colors[type]}; color: ${badge_text_colors[type]}; border: 1px solid ${badge_text_colors[type]};" class="text-xs font-medium leading-none font-['Inter'] px-4 py-2 rounded-full">${type}</span>
                `)}
              </div>
            </div>
          </div>
        `;
        
        // Initialize the tooltip with custom options
        new Tooltip(info.el, {
          title: tooltipContent,
          placement: 'right', // Position to the right of the event
          html: true, // Allow HTML content
          template: '<div class="tooltip z-10" role="tooltip"><div class="tooltip-inner"></div></div>',
          container: 'body', // Append to body to avoid z-index issues
          trigger: 'hover'
        });
      },
    });
    window.calendar.render();
    window.calendar.updateSize();
  }
